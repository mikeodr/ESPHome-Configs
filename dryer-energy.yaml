substitutions:
  device_name: dryer-energy
  friendly_name: "Power Sensor"
  device_description: "CT-clamp power sensor"
  homeassistant_grid_voltage_entity: sensor.home_site_voltage

esphome:
  name: "${device_name}"
  comment: "${device_description}"
  platform: ESP8266
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret dryer_energy_api_key

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name}"
    password: !secret fallback_password

captive_portal:

ota:
  password: !secret ota_password
  platform: esphome

output:
  - platform: esp8266_pwm
    id: power_led_output
    pin: D4

sensor:
  # The grid voltage entity from Home Assistant
  # Used for Power calcuation
  # V * A = W
  - platform: homeassistant
    name: "Grid Voltage Entity from Home Assistant"
    entity_id: "${homeassistant_grid_voltage_entity}"
    id: grid_voltage
    internal: true

  - platform: ct_clamp
    sensor: adc_sensor
    name: "Live Power"
    id: power_sensor_live_power
    device_class: power
    state_class: measurement
    update_interval: 5s
    filters:
      - calibrate_linear:
          method: exact
          datapoints:
            - 0.00000 -> 0
            - 0.00108 -> 5.11
            - 0.00222 -> 10.06
            - 0.00290 -> 15.14
            - 0.00331 -> 20.11
            - 0.00537 -> 25.03
            - 0.00710 -> 31.83
      - lambda: return x * id(grid_voltage).state;
    unit_of_measurement: "W"
    on_value:
      - then:
          - script.execute: flash_led

  - platform: adc
    pin: A0
    id: adc_sensor
    internal: true

light:
  - platform: binary
    name: "Power Sensor LED"
    id: power_led
    output: power_led_output
    internal: true

script:
  - id: flash_led
    then:
      - light.turn_on:
          id: power_led
      - delay: 100ms
      - light.turn_off:
          id: power_led
